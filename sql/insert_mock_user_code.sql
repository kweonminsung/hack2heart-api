-- Mock UserCode (유저별 코드 1~2개씩)
INSERT INTO UserCode (user_id, content, `index`) VALUES
  -- User 1 (2 codes)
  (1, 'console.log("Hello World!");', 1),
  (1, 'function fibonacci(n) {\n  if (n <= 1) return n;\n  return fibonacci(n-1) + fibonacci(n-2);\n}', 2),
  
  -- User 2 (1 code)
  (2, 'import pandas as pd\ndf = pd.read_csv("data.csv")\nprint(df.head())', 1),
  
  -- User 3 (2 codes)
  (3, 'public class HelloWorld {\n  public static void main(String[] args) {\n    System.out.println("Hello, World!");\n  }\n}', 1),
  (3, 'class Calculator {\n  public int add(int a, int b) {\n    return a + b;\n  }\n}', 2),
  
  -- User 4 (1 code)
  (4, 'interface User {\n  id: number;\n  name: string;\n  email: string;\n}\n\nconst user: User = {\n  id: 1,\n  name: "John",\n  email: "john@example.com"\n};', 1),
  
  -- User 5 (2 codes)
  (5, 'def quick_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quick_sort(left) + middle + quick_sort(right)', 1),
  (5, 'class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    \n    def greet(self):\n        return f"Hi, I\'m {self.name}"', 2),
  
  -- User 6 (1 code)
  (6, '#include <iostream>\nusing namespace std;\n\nint main() {\n    cout << "Hello, C++!" << endl;\n    return 0;\n}', 1),
  
  -- User 7 (2 codes)
  (7, 'const express = require("express");\nconst app = express();\n\napp.get("/", (req, res) => {\n  res.send("Hello Express!");\n});\n\napp.listen(3000, () => {\n  console.log("Server running on port 3000");\n});', 1),
  (7, 'async function fetchData(url) {\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error("Error:", error);\n  }\n}', 2),
  
  -- User 8 (1 code)
  (8, 'func main() {\n    fmt.Println("Hello, Go!")\n    \n    numbers := []int{1, 2, 3, 4, 5}\n    sum := 0\n    for _, num := range numbers {\n        sum += num\n    }\n    fmt.Printf("Sum: %d\\n", sum)\n}', 1),
  
  -- User 9 (2 codes)
  (9, 'import React, { useState } from "react";\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n  \n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>+</button>\n    </div>\n  );\n}', 1),
  (9, 'const useLocalStorage = (key, initialValue) => {\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      return initialValue;\n    }\n  });\n  \n  const setValue = (value) => {\n    setStoredValue(value);\n    localStorage.setItem(key, JSON.stringify(value));\n  };\n  \n  return [storedValue, setValue];\n};', 2),
  
  -- User 10 (1 code)
  (10, 'class TodoList {\n  constructor() {\n    this.todos = [];\n  }\n  \n  addTodo(text) {\n    this.todos.push({ id: Date.now(), text, completed: false });\n  }\n  \n  toggleTodo(id) {\n    const todo = this.todos.find(t => t.id === id);\n    if (todo) todo.completed = !todo.completed;\n  }\n}', 1),
  
  -- User 11 (2 codes)
  (11, 'def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1', 1),
  (11, 'import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\nplt.figure(figsize=(10, 6))\nplt.plot(x, y, label="sin(x)")\nplt.xlabel("x")\nplt.ylabel("y")\nplt.legend()\nplt.grid(True)\nplt.show()', 2),
  
  -- User 12 (1 code)
  (12, 'public class LinkedList<T> {\n    private Node<T> head;\n    \n    private class Node<T> {\n        T data;\n        Node<T> next;\n        \n        Node(T data) {\n            this.data = data;\n        }\n    }\n    \n    public void add(T data) {\n        Node<T> newNode = new Node<>(data);\n        if (head == null) {\n            head = newNode;\n        } else {\n            Node<T> current = head;\n            while (current.next != null) {\n                current = current.next;\n            }\n            current.next = newNode;\n        }\n    }\n}', 1),
  
  -- User 13 (2 codes)
  (13, 'fn factorial(n: u32) -> u32 {\n    match n {\n        0 | 1 => 1,\n        _ => n * factorial(n - 1),\n    }\n}\n\nfn main() {\n    println!("5! = {}", factorial(5));\n}', 1),
  (13, 'use std::collections::HashMap;\n\nfn word_count(text: &str) -> HashMap<String, usize> {\n    let mut counts = HashMap::new();\n    \n    for word in text.split_whitespace() {\n        let word = word.to_lowercase();\n        *counts.entry(word).or_insert(0) += 1;\n    }\n    \n    counts\n}', 2),
  
  -- User 14 (1 code)
  (14, 'SELECT u.name, p.name as package_name, l.name as language_name\nFROM User u\nJOIN Package p ON u.most_preferred_package_id = p.id\nJOIN Language l ON u.most_preferred_language_id = l.id\nWHERE u.looking_for_love = true\nORDER BY u.name;', 1),
  
  -- User 15 (2 codes)
  (15, 'import SwiftUI\n\nstruct ContentView: View {\n    @State private var count = 0\n    \n    var body: some View {\n        VStack {\n            Text("Count: \\(count)")\n                .font(.largeTitle)\n            \n            Button("Increment") {\n                count += 1\n            }\n            .buttonStyle(.borderedProminent)\n        }\n        .padding()\n    }\n}', 1),
  (15, 'class APIManager {\n    static let shared = APIManager()\n    \n    func fetchUser(id: Int, completion: @escaping (Result<User, Error>) -> Void) {\n        let url = URL(string: "https://api.example.com/users/\\(id)")!\n        \n        URLSession.shared.dataTask(with: url) { data, response, error in\n            if let error = error {\n                completion(.failure(error))\n                return\n            }\n            \n            guard let data = data else {\n                completion(.failure(APIError.noData))\n                return\n            }\n            \n            do {\n                let user = try JSONDecoder().decode(User.self, from: data)\n                completion(.success(user))\n            } catch {\n                completion(.failure(error))\n            }\n        }.resume()\n    }\n}', 2),
  
  -- User 16-200 (간소화된 패턴으로 생성)
  (16, 'echo "Hello from Bash!"\nfor i in {1..5}; do\n    echo "Number: $i"\ndone', 1),
  (17, 'def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    \n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    \n    return merge(left, right)', 1),
  (17, 'import requests\n\nresponse = requests.get("https://api.github.com/users/octocat")\nif response.status_code == 200:\n    user_data = response.json()\n    print(f"User: {user_data[\"name\"]}")', 2),
  (18, 'class Stack {\n    constructor() {\n        this.items = [];\n    }\n    \n    push(item) {\n        this.items.push(item);\n    }\n    \n    pop() {\n        return this.items.pop();\n    }\n    \n    peek() {\n        return this.items[this.items.length - 1];\n    }\n}', 1),
  (19, 'public void bubbleSort(int[] arr) {\n    int n = arr.length;\n    for (int i = 0; i < n - 1; i++) {\n        for (int j = 0; j < n - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n}', 1),
  (19, 'import java.util.HashMap;\nimport java.util.Map;\n\npublic class CharacterFrequency {\n    public static Map<Character, Integer> getFrequency(String str) {\n        Map<Character, Integer> freq = new HashMap<>();\n        for (char c : str.toCharArray()) {\n            freq.put(c, freq.getOrDefault(c, 0) + 1);\n        }\n        return freq;\n    }\n}', 2),
  (20, 'def is_palindrome(s):\n    s = s.lower().replace(" ", "")\n    return s == s[::-1]\n\n# Test\nprint(is_palindrome("A man a plan a canal Panama"))  # True', 1),
  -- Continue with more users...
  (21, 'const debounce = (func, delay) => {\n  let timeoutId;\n  return (...args) => {\n    clearTimeout(timeoutId);\n    timeoutId = setTimeout(() => func.apply(this, args), delay);\n  };\n};', 1),
  (22, 'def decorator_with_args(arg):\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            print(f"Decorator arg: {arg}")\n            return func(*args, **kwargs)\n        return wrapper\n    return decorator\n\n@decorator_with_args("test")\ndef greet(name):\n    print(f"Hello, {name}!")', 1),
  (22, 'import asyncio\n\nasync def fetch_data(url):\n    print(f"Fetching {url}")\n    await asyncio.sleep(1)  # Simulate network delay\n    return f"Data from {url}"\n\nasync def main():\n    tasks = [fetch_data(f"url{i}") for i in range(3)]\n    results = await asyncio.gather(*tasks)\n    print(results)', 2),
  (23, 'type User = {\n  id: number;\n  name: string;\n  email?: string;\n};\n\nconst createUser = (data: Omit<User, "id">): User => {\n  return {\n    id: Math.random(),\n    ...data\n  };\n};', 1),
  (24, '#include <vector>\n#include <algorithm>\n\nclass Solution {\npublic:\n    std::vector<int> twoSum(std::vector<int>& nums, int target) {\n        std::unordered_map<int, int> map;\n        for (int i = 0; i < nums.size(); i++) {\n            int complement = target - nums[i];\n            if (map.find(complement) != map.end()) {\n                return {map[complement], i};\n            }\n            map[nums[i]] = i;\n        }\n        return {};\n    }\n};', 1),
  (24, 'template<typename T>\nclass SmartPtr {\nprivate:\n    T* ptr;\n    int* ref_count;\n    \npublic:\n    SmartPtr(T* p = nullptr) : ptr(p), ref_count(new int(1)) {}\n    \n    ~SmartPtr() {\n        if (--(*ref_count) == 0) {\n            delete ptr;\n            delete ref_count;\n        }\n    }\n    \n    T& operator*() { return *ptr; }\n    T* operator->() { return ptr; }\n};', 2),
  (25, 'package main\n\nimport (\n    "context"\n    "fmt"\n    "time"\n)\n\nfunc worker(ctx context.Context, id int) {\n    for {\n        select {\n        case <-ctx.Done():\n            fmt.Printf("Worker %d stopped\\n", id)\n            return\n        default:\n            fmt.Printf("Worker %d working\\n", id)\n            time.Sleep(time.Second)\n        }\n    }\n}', 1),
  (26, 'def create_api():\n    from flask import Flask, jsonify, request\n    app = Flask(__name__)\n    \n    @app.route("/api/users", methods=["GET"])\n    def get_users():\n        return jsonify({"users": [{"id": 1, "name": "John"}]})\n    \n    @app.route("/api/users", methods=["POST"])\n    def create_user():\n        data = request.json\n        return jsonify({"message": "User created", "data": data})\n    \n    return app', 1),
  (27, 'import React, { useEffect, useReducer } from "react";\n\nconst todoReducer = (state, action) => {\n  switch (action.type) {\n    case "ADD_TODO":\n      return [...state, { id: Date.now(), text: action.text, done: false }];\n    case "TOGGLE_TODO":\n      return state.map(todo =>\n        todo.id === action.id ? { ...todo, done: !todo.done } : todo\n      );\n    default:\n      return state;\n  }\n};\n\nfunction TodoApp() {\n  const [todos, dispatch] = useReducer(todoReducer, []);\n  return <div>Todo App</div>;\n}', 1),
  (28, 'enum Status {\n    case pending\n    case completed(String)\n    case failed(Error)\n}\n\nstruct Task {\n    let id: UUID\n    let title: String\n    var status: Status\n    \n    mutating func complete(with result: String) {\n        status = .completed(result)\n    }\n}', 1),
  (29, 'use tokio::net::{TcpListener, TcpStream};\nuse tokio::io::{AsyncReadExt, AsyncWriteExt};\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let listener = TcpListener::bind("127.0.0.1:8080").await?;\n    \n    loop {\n        let (socket, _) = listener.accept().await?;\n        tokio::spawn(handle_connection(socket));\n    }\n}\n\nasync fn handle_connection(mut socket: TcpStream) -> Result<(), Box<dyn std::error::Error>> {\n    let mut buffer = [0; 1024];\n    let n = socket.read(&mut buffer).await?;\n    socket.write_all(&buffer[0..n]).await?;\n    Ok(())\n}', 1),
  (30, 'class BinaryTree:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n    \n    def insert(self, value):\n        if value < self.value:\n            if self.left is None:\n                self.left = BinaryTree(value)\n            else:\n                self.left.insert(value)\n        else:\n            if self.right is None:\n                self.right = BinaryTree(value)\n            else:\n                self.right.insert(value)\n    \n    def inorder_traversal(self):\n        result = []\n        if self.left:\n            result.extend(self.left.inorder_traversal())\n        result.append(self.value)\n        if self.right:\n            result.extend(self.right.inorder_traversal())\n        return result', 1),
  (31, 'const memoize = (fn) => {\n  const cache = new Map();\n  return (...args) => {\n    const key = JSON.stringify(args);\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    const result = fn(...args);\n    cache.set(key, result);\n    return result;\n  };\n};\n\nconst fibonacci = memoize((n) => {\n  if (n <= 1) return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n});', 1),
  (32, 'public class QuickSort {\n    public static void quickSort(int[] arr, int low, int high) {\n        if (low < high) {\n            int pi = partition(arr, low, high);\n            quickSort(arr, low, pi - 1);\n            quickSort(arr, pi + 1, high);\n        }\n    }\n    \n    private static int partition(int[] arr, int low, int high) {\n        int pivot = arr[high];\n        int i = (low - 1);\n        \n        for (int j = low; j < high; j++) {\n            if (arr[j] < pivot) {\n                i++;\n                int temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n        \n        int temp = arr[i + 1];\n        arr[i + 1] = arr[high];\n        arr[high] = temp;\n        \n        return i + 1;\n    }\n}', 1),
  (33, 'import numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error, r2_score\n\n# Generate sample data\nX = np.random.randn(100, 1)\ny = 2 * X.ravel() + np.random.randn(100)\n\n# Split the data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train the model\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# Make predictions\ny_pred = model.predict(X_test)\n\n# Evaluate\nmse = mean_squared_error(y_test, y_pred)\nr2 = r2_score(y_test, y_pred)\n\nprint(f"MSE: {mse:.4f}")\nprint(f"R²: {r2:.4f}")', 1),
  (34, 'interface Repository<T> {\n  findById(id: string): Promise<T | null>;\n  findAll(): Promise<T[]>;\n  create(entity: Omit<T, "id">): Promise<T>;\n  update(id: string, entity: Partial<T>): Promise<T | null>;\n  delete(id: string): Promise<boolean>;\n}\n\nclass UserRepository implements Repository<User> {\n  private users: User[] = [];\n\n  async findById(id: string): Promise<User | null> {\n    return this.users.find(user => user.id === id) || null;\n  }\n\n  async findAll(): Promise<User[]> {\n    return [...this.users];\n  }\n\n  async create(userData: Omit<User, "id">): Promise<User> {\n    const user: User = {\n      id: crypto.randomUUID(),\n      ...userData\n    };\n    this.users.push(user);\n    return user;\n  }\n\n  async update(id: string, updates: Partial<User>): Promise<User | null> {\n    const index = this.users.findIndex(user => user.id === id);\n    if (index === -1) return null;\n    \n    this.users[index] = { ...this.users[index], ...updates };\n    return this.users[index];\n  }\n\n  async delete(id: string): Promise<boolean> {\n    const index = this.users.findIndex(user => user.id === id);\n    if (index === -1) return false;\n    \n    this.users.splice(index, 1);\n    return true;\n  }\n}', 1),
  (35, 'def decorator_timer(func):\n    import time\n    import functools\n    \n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        start_time = time.time()\n        result = func(*args, **kwargs)\n        end_time = time.time()\n        print(f"{func.__name__} took {end_time - start_time:.4f} seconds")\n        return result\n    return wrapper\n\n@decorator_timer\ndef slow_function():\n    import time\n    time.sleep(1)\n    return "Done!"', 1),
  (35, 'class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef is_valid_bst(root, min_val=float(\'-inf\'), max_val=float(\'inf\')):\n    if not root:\n        return True\n    \n    if root.val <= min_val or root.val >= max_val:\n        return False\n    \n    return (is_valid_bst(root.left, min_val, root.val) and\n            is_valid_bst(root.right, root.val, max_val))', 2),
  (36, 'print("Hello, Python!")\nfor i in range(5):\n    print(f"Number: {i}")', 1),
  (37, 'console.log("JavaScript is awesome!");\nconst numbers = [1, 2, 3, 4, 5];\nconst doubled = numbers.map(n => n * 2);\nconsole.log(doubled);', 1),
  (38, 'public class Main {\n    public static void main(String[] args) {\n        System.out.println("Java programming!");\n    }\n}', 1),
  (39, 'SELECT * FROM users WHERE age > 18 ORDER BY name;', 1),
  (40, 'const fetchUsers = async () => {\n  const response = await fetch("/api/users");\n  return response.json();\n};', 1),
  (41, 'def factorial(n):\n    return 1 if n <= 1 else n * factorial(n-1)', 1),
  (42, 'const sum = (a, b) => a + b;\nconsole.log(sum(5, 3));', 1),
  (43, 'import java.util.List;\nimport java.util.Arrays;\n\nList<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);', 1),
  (44, 'echo "Shell scripting!"\nls -la', 1),
  (45, 'def greet(name):\n    return f"Hello, {name}!"', 1),
  (46, 'function greet(name) {\n  return `Hello, ${name}!`;\n}', 1),
  (47, 'System.out.println("Java rocks!");', 1),
  (48, 'SELECT COUNT(*) FROM orders WHERE status = "completed";', 1),
  (49, 'const users = ["Alice", "Bob", "Charlie"];\nusers.forEach(user => console.log(user));', 1),
  (50, 'import random\nprint(random.randint(1, 100))', 1),
  (51, 'const isEven = (n) => n % 2 === 0;', 1),
  (52, 'def is_prime(n):\n    if n < 2: return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0: return False\n    return True', 1),
  (53, 'public boolean isPalindrome(String s) {\n    return s.equals(new StringBuilder(s).reverse().toString());\n}', 1),
  (54, 'SELECT u.name, COUNT(o.id) as order_count\nFROM users u\nLEFT JOIN orders o ON u.id = o.user_id\nGROUP BY u.id;', 1),
  (55, 'const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));', 1),
  (56, 'import pandas as pd\ndf = pd.DataFrame({"A": [1, 2, 3], "B": [4, 5, 6]})\nprint(df.describe())', 1),
  (57, 'function* fibonacci() {\n  let a = 0, b = 1;\n  while (true) {\n    yield a;\n    [a, b] = [b, a + b];\n  }\n}', 1),
  (58, 'class Animal {\n    constructor(name) {\n        this.name = name;\n    }\n    speak() {\n        console.log(`${this.name} makes a sound`);\n    }\n}', 1),
  (59, 'def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]', 1),
  (60, 'import java.util.HashMap;\nMap<String, Integer> map = new HashMap<>();\nmap.put("key", 42);', 1),
  (61, 'const apiCall = fetch("/api/data").then(res => res.json());', 1),
  (62, 'print(f"Today is {datetime.now().strftime(\'%Y-%m-%d\')}")', 1),
  (63, 'function reverseString(str) {\n    return str.split("").reverse().join("");\n}', 1),
  (64, 'public class Person {\n    private String name;\n    public Person(String name) { this.name = name; }\n    public String getName() { return name; }\n}', 1),
  (65, 'UPDATE users SET last_login = NOW() WHERE id = 1;', 1),
  (66, 'const numbers = [1,2,3,4,5];\nconst sum = numbers.reduce((a,b) => a+b, 0);', 1),
  (67, 'def max_element(lst):\n    return max(lst) if lst else None', 1),
  (68, 'import React from "react";\nconst App = () => <h1>Hello React!</h1>;', 1),
  (69, 'class Calculator {\n    add(a, b) { return a + b; }\n    subtract(a, b) { return a - b; }\n}', 1),
  (70, 'SELECT DISTINCT category FROM products ORDER BY category;', 1),
  (71, 'const unique = arr => [...new Set(arr)];', 1),
  (72, 'import numpy as np\narr = np.array([1, 2, 3, 4, 5])\nprint(np.mean(arr))', 1),
  (73, 'function flattenArray(arr) {\n    return arr.flat(Infinity);\n}', 1),
  (74, 'public static int binarySearch(int[] arr, int target) {\n    int left = 0, right = arr.length - 1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (arr[mid] == target) return mid;\n        if (arr[mid] < target) left = mid + 1;\n        else right = mid - 1;\n    }\n    return -1;\n}', 1),
  (75, 'DELETE FROM users WHERE last_login < DATE_SUB(NOW(), INTERVAL 1 YEAR);', 1),
  (76, 'const capitalize = str => str.charAt(0).toUpperCase() + str.slice(1);', 1),
  (77, 'def merge_dicts(dict1, dict2):\n    return {**dict1, **dict2}', 1),
  (78, 'const randomChoice = arr => arr[Math.floor(Math.random() * arr.length)];', 1),
  (79, 'import java.util.stream.Collectors;\nList<String> result = list.stream().filter(s -> s.length() > 3).collect(Collectors.toList());', 1),
  (80, 'SELECT AVG(price) as avg_price FROM products WHERE category = "electronics";', 1),
  (81, 'const throttle = (func, limit) => {\n    let inThrottle;\n    return function() {\n        const args = arguments;\n        const context = this;\n        if (!inThrottle) {\n            func.apply(context, args);\n            inThrottle = true;\n            setTimeout(() => inThrottle = false, limit);\n        }\n    }\n}', 1),
  (82, 'def count_vowels(text):\n    return sum(1 for char in text.lower() if char in "aeiou")', 1),
  (83, 'const deepClone = obj => JSON.parse(JSON.stringify(obj));', 1),
  (84, 'public class Singleton {\n    private static Singleton instance;\n    private Singleton() {}\n    public static Singleton getInstance() {\n        if (instance == null) instance = new Singleton();\n        return instance;\n    }\n}', 1),
  (85, 'CREATE INDEX idx_user_email ON users(email);', 1),
  (86, 'const curry = (fn) => (...args) => args.length >= fn.length ? fn(...args) : curry(fn.bind(null, ...args));', 1),
  (87, 'def fibonacci_generator(n):\n    a, b = 0, 1\n    for _ in range(n):\n        yield a\n        a, b = b, a + b', 1),
  (88, 'const pipe = (...fns) => (value) => fns.reduce((acc, fn) => fn(acc), value);', 1),
  (89, 'import java.time.LocalDateTime;\nLocalDateTime now = LocalDateTime.now();\nSystem.out.println(now);', 1),
  (90, 'ALTER TABLE users ADD COLUMN created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP;', 1),
  (91, 'const isValidEmail = email => /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email);', 1),
  (92, 'def remove_duplicates(lst):\n    return list(dict.fromkeys(lst))', 1),
  (93, 'const chunk = (arr, size) => Array.from({length: Math.ceil(arr.length/size)}, (v,i) => arr.slice(i*size, i*size+size));', 1),
  (94, 'public enum Status { ACTIVE, INACTIVE, PENDING }', 1),
  (95, 'SELECT * FROM users WHERE name LIKE "%john%" LIMIT 10;', 1),
  (96, 'const omit = (obj, keys) => Object.fromEntries(Object.entries(obj).filter(([k]) => !keys.includes(k)));', 1),
  (97, 'def binary_to_decimal(binary_str):\n    return int(binary_str, 2)', 1),
  (98, 'const retry = async (fn, retries = 3) => {\n    try { return await fn(); }\n    catch (err) {\n        if (retries > 0) return retry(fn, retries - 1);\n        throw err;\n    }\n};', 1),
  (99, 'import java.util.Optional;\nOptional<String> optional = Optional.ofNullable(getString());\noptional.ifPresent(System.out::println);', 1),
  (100, 'EXPLAIN SELECT * FROM users WHERE age > 25 AND city = "Seoul";', 1),
  (101, 'const groupBy = (arr, key) => arr.reduce((groups, item) => ({ ...groups, [item[key]]: [...(groups[item[key]] || []), item] }), {});', 1),
  (102, 'def matrix_multiply(A, B):\n    return [[sum(a*b for a,b in zip(A_row,B_col)) for B_col in zip(*B)] for A_row in A]', 1),
  (103, 'function* range(start, end, step = 1) {\n    for (let i = start; i < end; i += step) yield i;\n}', 1),
  (104, 'public record Point(double x, double y) {\n    public double distance(Point other) {\n        return Math.sqrt(Math.pow(x - other.x, 2) + Math.pow(y - other.y, 2));\n    }\n}', 1),
  (105, 'CREATE VIEW active_users AS SELECT * FROM users WHERE status = "active";', 1),
  (106, 'const memoizedFib = (() => {\n    const cache = {};\n    return function fib(n) {\n        if (n in cache) return cache[n];\n        if (n <= 1) return n;\n        return cache[n] = fib(n-1) + fib(n-2);\n    };\n})();', 1),
  (107, 'class ContextManager:\n    def __enter__(self):\n        print("Entering context")\n        return self\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        print("Exiting context")', 1),
  (108, 'const asyncMap = async (arr, asyncFn) => Promise.all(arr.map(asyncFn));', 1),
  (109, 'interface Comparable<T> {\n    int compareTo(T other);\n}\n\nclass Student implements Comparable<Student> {\n    private String name;\n    public int compareTo(Student other) {\n        return this.name.compareTo(other.name);\n    }\n}', 1),
  (110, 'WITH RECURSIVE factorial(n, result) AS (\n    SELECT 1, 1\n    UNION ALL\n    SELECT n+1, result*(n+1) FROM factorial WHERE n < 10\n)\nSELECT * FROM factorial;', 1),
  (111, 'const debouncePromise = (fn, delay) => {\n    let timeoutId;\n    return (...args) => {\n        return new Promise((resolve) => {\n            clearTimeout(timeoutId);\n            timeoutId = setTimeout(() => resolve(fn(...args)), delay);\n        });\n    };\n};', 1),
  (112, 'def decorator_cache(maxsize=128):\n    def decorator(func):\n        cache = {}\n        def wrapper(*args):\n            if args in cache:\n                return cache[args]\n            result = func(*args)\n            if len(cache) < maxsize:\n                cache[args] = result\n            return result\n        return wrapper\n    return decorator', 1),
  (113, 'const asyncReduce = async (arr, reducer, initialValue) => {\n    let acc = initialValue;\n    for (const item of arr) {\n        acc = await reducer(acc, item);\n    }\n    return acc;\n};', 1),
  (114, 'public class Builder {\n    private String name;\n    private int age;\n    \n    public Builder name(String name) { this.name = name; return this; }\n    public Builder age(int age) { this.age = age; return this; }\n    public Person build() { return new Person(name, age); }\n}', 1),
  (115, 'SELECT u.name, COUNT(p.id) as post_count\nFROM users u\nLEFT JOIN posts p ON u.id = p.author_id\nGROUP BY u.id\nHAVING COUNT(p.id) > 5;', 1),
  (116, 'const createStore = (reducer, initialState) => {\n    let state = initialState;\n    let listeners = [];\n    \n    return {\n        getState: () => state,\n        dispatch: (action) => {\n            state = reducer(state, action);\n            listeners.forEach(listener => listener());\n        },\n        subscribe: (listener) => {\n            listeners.push(listener);\n            return () => listeners = listeners.filter(l => l !== listener);\n        }\n    };\n};', 1),
  (117, 'def quickselect(arr, k):\n    if len(arr) == 1:\n        return arr[0]\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    \n    if k < len(left):\n        return quickselect(left, k)\n    elif k < len(left) + len(middle):\n        return middle[0]\n    else:\n        return quickselect(right, k - len(left) - len(middle))', 1),
  (118, 'const createAsyncIterator = (arr) => {\n    let index = 0;\n    return {\n        async next() {\n            await new Promise(resolve => setTimeout(resolve, 100));\n            if (index < arr.length) {\n                return { value: arr[index++], done: false };\n            }\n            return { done: true };\n        },\n        [Symbol.asyncIterator]() { return this; }\n    };\n};', 1),
  (119, 'public class LRUCache<K, V> {\n    private final int capacity;\n    private final LinkedHashMap<K, V> cache;\n    \n    public LRUCache(int capacity) {\n        this.capacity = capacity;\n        this.cache = new LinkedHashMap<K, V>(16, 0.75f, true) {\n            protected boolean removeEldestEntry(Map.Entry<K, V> eldest) {\n                return size() > capacity;\n            }\n        };\n    }\n    \n    public V get(K key) { return cache.get(key); }\n    public void put(K key, V value) { cache.put(key, value); }\n}', 1),
  (120, 'CREATE TRIGGER update_user_timestamp\nBEFORE UPDATE ON users\nFOR EACH ROW\nSET NEW.updated_at = NOW();', 1),
  (121, 'console.log("Hello World");', 1),
  (122, 'print("Python is great!")', 1),
  (123, 'System.out.println("Java programming");', 1),
  (124, 'SELECT * FROM products;', 1),
  (125, 'const add = (a, b) => a + b;', 1),
  (126, 'def multiply(x, y): return x * y', 1),
  (127, 'public int divide(int a, int b) { return a / b; }', 1),
  (128, 'UPDATE products SET price = price * 1.1;', 1),
  (129, 'const numbers = [1, 2, 3, 4, 5];', 1),
  (130, 'my_list = [1, 2, 3, 4, 5]', 1),
  (131, 'int[] array = {1, 2, 3, 4, 5};', 1),
  (132, 'INSERT INTO users (name) VALUES ("John");', 1),
  (133, 'const greeting = name => `Hello, ${name}`;', 1),
  (134, 'def square(n): return n ** 2', 1),
  (135, 'public boolean isPositive(int n) { return n > 0; }', 1),
  (136, 'DELETE FROM logs WHERE created_at < "2023-01-01";', 1),
  (137, 'const today = new Date();', 1),
  (138, 'import datetime; now = datetime.datetime.now()', 1),
  (139, 'LocalDate today = LocalDate.now();', 1),
  (140, 'SELECT COUNT(*) FROM users;', 1),
  (141, 'const randomNumber = Math.random();', 1),
  (142, 'import random; num = random.randint(1, 10)', 1),
  (143, 'Random random = new Random(); int num = random.nextInt(10);', 1),
  (144, 'CREATE TABLE products (id INT PRIMARY KEY, name VARCHAR(255));', 1),
  (145, 'const colors = ["red", "green", "blue"];', 1),
  (146, 'fruits = ["apple", "banana", "cherry"]', 1),
  (147, 'String[] names = {"Alice", "Bob", "Charlie"};', 1),
  (148, 'SELECT * FROM orders ORDER BY created_at DESC;', 1),
  (149, 'const isEven = n => n % 2 === 0;', 1),
  (150, 'def is_odd(n): return n % 2 == 1', 1),
  (151, 'public boolean isEven(int n) { return n % 2 == 0; }', 1),
  (152, 'SELECT MAX(price) FROM products;', 1),
  (153, 'const max = Math.max(1, 2, 3, 4, 5);', 1),
  (154, 'maximum = max([1, 2, 3, 4, 5])', 1),
  (155, 'int max = Collections.max(Arrays.asList(1, 2, 3, 4, 5));', 1),
  (156, 'DROP TABLE IF EXISTS temp_data;', 1),
  (157, 'const sum = [1,2,3].reduce((a,b) => a+b);', 1),
  (158, 'total = sum([1, 2, 3, 4, 5])', 1),
  (159, 'int sum = IntStream.of(1,2,3,4,5).sum();', 1),
  (160, 'SELECT AVG(age) FROM users;', 1),
  (161, 'const average = arr => arr.reduce((a,b) => a+b) / arr.length;', 1),
  (162, 'def average(lst): return sum(lst) / len(lst)', 1),
  (163, 'public double average(int[] arr) { return Arrays.stream(arr).average().orElse(0.0); }', 1),
  (164, 'TRUNCATE TABLE logs;', 1),
  (165, 'const reverse = str => str.split("").reverse().join("");', 1),
  (166, 'def reverse_string(s): return s[::-1]', 1),
  (167, 'public String reverse(String str) { return new StringBuilder(str).reverse().toString(); }', 1),
  (168, 'SELECT DISTINCT category FROM products;', 1),
  (169, 'const unique = [...new Set([1,1,2,2,3])];', 1),
  (170, 'unique_items = list(set([1, 1, 2, 2, 3]))', 1),
  (171, 'Set<Integer> unique = new HashSet<>(Arrays.asList(1,1,2,2,3));', 1),
  (172, 'ALTER TABLE users ADD email VARCHAR(255);', 1),
  (173, 'const sort = arr => arr.sort();', 1),
  (174, 'sorted_list = sorted([3, 1, 4, 1, 5])', 1),
  (175, 'Arrays.sort(array);', 1),
  (176, 'CREATE INDEX idx_name ON users(name);', 1),
  (177, 'const filter = arr => arr.filter(x => x > 0);', 1),
  (178, 'positive = [x for x in [-1, 0, 1, 2] if x > 0]', 1),
  (179, 'List<Integer> positive = list.stream().filter(x -> x > 0).collect(Collectors.toList());', 1),
  (180, 'GRANT SELECT ON users TO readonly_user;', 1),
  (181, 'const map = arr => arr.map(x => x * 2);', 1),
  (182, 'doubled = [x * 2 for x in [1, 2, 3, 4]]', 1),
  (183, 'List<Integer> doubled = list.stream().map(x -> x * 2).collect(Collectors.toList());', 1),
  (184, 'REVOKE DELETE ON users FROM app_user;', 1),
  (185, 'const find = arr => arr.find(x => x > 10);', 1),
  (186, 'found = next((x for x in [5, 15, 25] if x > 10), None)', 1),
  (187, 'Optional<Integer> found = list.stream().filter(x -> x > 10).findFirst();', 1),
  (188, 'BACKUP DATABASE mydb TO "/path/backup.sql";', 1),
  (189, 'const includes = arr => arr.includes(3);', 1),
  (190, 'has_three = 3 in [1, 2, 3, 4, 5]', 1),
  (191, 'boolean contains = list.contains(3);', 1),
  (192, 'RESTORE DATABASE mydb FROM "/path/backup.sql";', 1),
  (193, 'const join = arr => arr.join(",");', 1),
  (194, 'joined = ",".join(["a", "b", "c"])', 1),
  (195, 'String joined = String.join(",", list);', 1),
  (196, 'SET @var = 42; SELECT @var;', 1),
  (197, 'const split = str => str.split(",");', 1),
  (198, 'parts = "a,b,c".split(",")', 1),
  (199, 'String[] parts = "a,b,c".split(",");', 1),
  (200, 'SELECT VERSION();', 1);
